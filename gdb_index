#################################################################
# key_init.cpp
#b fa_read

source gdb_shared

set $dbg=9


define pseq
    if $argc != 0
        help pseq
    else
        printf "[\t+%u]:\t", seq.p>>1
        call print_seq(&seq, KEY_WIDTH)
    end
end

document pseq
	Prints seq.
	Syntax: pseq
end



#b key_init.cpp:190
break_re 'get_kct(kc, seq, 1);' 'key_init.cpp' 'break'
commands
    silent
    pseq
    c
end

#TODO use grep -n to get this:
#cscope -L -0 main main.cpp

#b key_init.cpp:223
break_re '// key after header/stretch to be rebuilt' 'key_init.cpp' 'break'
commands
    silent
    if corr == 0
        printf "Header "
        # because printf states: Cannot access memory at address ...
        output  kc->id[h->ido]
        printf "\n"
    else
        if seq.p != 0
            printf "N stretch of %u\n", corr
        else
            printf "N stretch at start of contig (not inserted)\n"
        end
    end
    c
end

break_re 'kc->ct += kc->kct_l;' 'key_init.cpp' 'tbreak'
commands
    silent
    if $dbg > 6
        print show_mantras(kc, 0, 0, kc->bnd)
    end
    c
end


#################################################################
# fa.cpp: print definitions

define dbg_whereat
    if $dbg > 4
        set listsize 1
        list
        set listsize 10
    end
end

define dbg_pseq
    if $dbg > $arg0
        call print_seq(&seq, KEY_WIDTH)
    end
end

define dbg_print
    if $dbg > $arg0
        printf $arg1
    end
end

define dbg_kct
    if $dbg > $arg0
        call print_kct(kc, bnd, e, k)
    end
end

define dbg_mantras
    if $dbg > $arg0
        print show_mantras(kc, e->obnd, e->obnd_l, bnd)
    end
end

#################################################################
# fa.cpp: debug print locations

define break_commands
    commands $arg0
        silent
        dbg_whereat
        c
    end
end
python break_re_py2('//P;', 'fa.cpp', 'break', 1)

define break_commands
    commands $arg0
        silent
        if $dbg > 6
            call print_dna(dna, '\n', KEY_WIDTH)
        end
        #dbg_whereat
        c
    end
end
python break_re_py2('//O; .* occurance', 'fa.cpp', 'break', 1);

break_re '//~ uniq$' 'fa.cpp' 'break'
commands
    silent
    if *k
        if ~*k & DUP_BIT
            if $dbg > 5
                call print_posseq(e->s, *k, KEY_WIDTH)
            end
            dbg_print 5 "uniq----^^^\n"
        else
            if $dbg > 6
                call print_posseq(e->s, *k, KEY_WIDTH)
            end
        end
    end
    c
end

break_re '//~ also update header$' 'fa.cpp' 'break'
commands
    silent
    if $dbg > 0
        printf "stored k offset %u for hdr %u\nnext hdr\n", e->tgtk - kc->kct, bnd->ho - 1
    end
    if $dbg > 1
        printf "2bit sequence offset became %u:\t", e->s + kc->h[bnd->ho]->len - kc->s
        call print_dna(e->s[kc->h[bnd->ho]->len], '.', 4)
        printf "..\n"
    end
    c
end


define break_commands
    commands $arg0
        silent
        dbg_whereat
        dbg_mantras 7
        c
    end
end
python break_re_py2('//M;', 'fa.cpp', 'break', 1)

define break_commands
    commands $arg0
        silent
        dbg_whereat
        dbg_kct 8
        c
    end
end
python break_re_py2('//K;', 'fa.cpp', 'break', 1)

define break_commands
    commands $arg0
        silent
        dbg_whereat
        dbg_kct 8
        dbg_mantras 7
        c
    end
end
python break_re_py2('//B;', 'fa.cpp', 'break', 1)

define break_commands
    commands $arg0
        silent
        if $dbg > 6
            pseq
        end
        c
    end
end
python break_re_py2('//S;', 'fa.cpp', 'break', 1)


#TODO:
# branch analysis:
# store if/for/(do-)while branch taken info, print if taken first n times. (not taken is difficult)

#TODO:
# parse line and print all variables here. (i.e. before execution)

#leave:
r

